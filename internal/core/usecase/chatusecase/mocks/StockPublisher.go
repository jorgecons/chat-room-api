// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	domain "chat-room-api/internal/core/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StockPublisher is an autogenerated mock type for the StockPublisher type
type StockPublisher struct {
	mock.Mock
}

type StockPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *StockPublisher) EXPECT() *StockPublisher_Expecter {
	return &StockPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: _a0, _a1, _a2
func (_m *StockPublisher) Publish(_a0 context.Context, _a1 domain.Message, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Message, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StockPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type StockPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.Message
//   - _a2 string
func (_e *StockPublisher_Expecter) Publish(_a0 interface{}, _a1 interface{}, _a2 interface{}) *StockPublisher_Publish_Call {
	return &StockPublisher_Publish_Call{Call: _e.mock.On("Publish", _a0, _a1, _a2)}
}

func (_c *StockPublisher_Publish_Call) Run(run func(_a0 context.Context, _a1 domain.Message, _a2 string)) *StockPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Message), args[2].(string))
	})
	return _c
}

func (_c *StockPublisher_Publish_Call) Return(_a0 error) *StockPublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StockPublisher_Publish_Call) RunAndReturn(run func(context.Context, domain.Message, string) error) *StockPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewStockPublisher creates a new instance of StockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *StockPublisher {
	mock := &StockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
